"""generate_copyright_info
Part of tern-to-markdown project.
Author: Lukasz Kostrzewa
License: MIT

This script generates markdown file with a table of installed software
with its licenses and copywright notice.
"""

import yaml
import logging
import re
from typing import List
import argparse


def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    sh = logging.StreamHandler()
    format = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
    sh.setFormatter(format)
    logger.addHandler(sh)
    return logger


def generate_output(
        source_file: str,
        target_file: str) -> bool:
    with open(source_file, 'r') as fstream:
        _LOG.debug('Opening {}. This may take a while.'.format(source_file))
        try:
            data = yaml.safe_load(fstream)
        except yaml.YAMLError as exc:
            _LOG.critical(exc)
            return False

    root = data['image']
    image = root['name']
    _LOG.debug('Generating report for image {}.'.format(image))
    packages_info = extract_packages_copyright(root['layers'])
    generate_markdown(target_file, image, packages_info)
    return True


def extract_packages_copyright(layers: dict) -> List[dict]:
    copyright_info = []
    for layer in layers:
        for package in layer['packages']:
            licenses = package['pkg_licenses']
            if isinstance(licenses, list):
                licenses = '; '.join(licenses)

            copyright_info.append({
                'name': package['name'].strip(),
                'version': package['version'].strip(),
                'licenses': licenses.strip(),
                'copyright': package['copyright']
            })

    _LOG.debug('Found {} packages.'.format(len(copyright_info)))
    return copyright_info


def generate_markdown(
        file: str,
        image_name: str,
        packages_info: List[str]):

    tern_link = 'https://github.com/tern-tools/tern'

    with open(file, 'w') as fstream:
        _LOG.debug('Creating {}.'.format(file))
        fstream.write(
            'List of packges with copyright information found in {} using [Tern]({}) tool.\n\n'.format(
                image_name, tern_link))

        for package in packages_info:
            fstream.write('### {}\n'.format(package['name']))
            fstream.write('version: {}  \n'.format(package['version']))
            fstream.write('licenses: {}  \n'.format(package['licenses']))
            fstream.write(
                'copyright notice:  \n```\n{}\n``` \n'.format(
                    package['copyright']))


def setup_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-i',
        '--input',
        help='Input file in YAML format with report generated by the Tern tool.',
        required=True)
    parser.add_argument(
        '-o',
        '--output',
        help='Output markdown file with information about licenses and copyrights.',
        default='packages_info.md')
    return parser


_LOG = setup_logger()

if __name__ == "__main__":
    args = setup_parser().parse_args()
    generate_output(args.input, args.output)
