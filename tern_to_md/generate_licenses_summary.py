"""generate_licenses_summary
Part of tern-to-markdown project.
Author: Lukasz Kostrzewa
License: MIT

This script generates markdown file with a list of licenses found in
the Docker image by the Tern tool.
"""

import yaml
import logging
import re
from typing import Set
import argparse


def setup_logger():
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    sh = logging.StreamHandler()
    format = logging.Formatter('%(asctime)s %(levelname)s: %(message)s')
    sh.setFormatter(format)
    logger.addHandler(sh)
    return logger


def generate_summary(
        source_file: str,
        target_file: str,
        as_list: bool) -> bool:
    with open(source_file, 'r') as fstream:
        _LOG.debug('Opening {}. This may take a while.'.format(source_file))
        try:
            data = yaml.safe_load(fstream)
        except yaml.YAMLError as exc:
            _LOG.critical(exc)
            return

    root = data['image']
    image = root['name']
    _LOG.debug('Generating report for image {}.'.format(image))
    licenses = extract_licenses_list(root['layers'])
    generate_markdown(target_file, image, licenses, as_list)


def extract_licenses_list(layers: dict) -> Set[str]:
    licenses_set = set()
    for layer in layers:
        for package in layer['packages']:
            licenses = package['pkg_licenses']
            if isinstance(licenses, list):
                licenses_to_process = licenses
            else:
                licenses_to_process = [licenses]

            for license in licenses_to_process:
                licenses_set.add(license.strip())

    _LOG.debug('Found {} licenses.'.format(len(licenses_set)))
    return licenses_set


def generate_markdown(
        file: str,
        image_name: str,
        licenses: Set[str],
        as_list: bool):

    tern_link = 'https://github.com/tern-tools/tern'

    with open(file, 'w') as fstream:
        _LOG.debug('Creating {}.'.format(file))
        fstream.write(
            'Licenses found in {} using [Tern]({}) tool.\n\n'.format(
                image_name, tern_link))

        if as_list:
            string_format = '- {}\n'
        else:
            string_format = '{}; '

        for license in licenses:
            fstream.write(string_format.format(license))


def setup_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-i',
        '--input',
        help='Input file in YAML format with report generated by the Tern tool.',
        required=True)
    parser.add_argument(
        '-o',
        '--output',
        help='Output markdown file with list of licenses.',
        default='licenses.md')
    parser.add_argument(
        '-f',
        '--format',
        help='Licenses format in the output file. Accepted values are `list` and `block`.',
        choices=[
            'list',
            'block'],
        default='list')
    return parser


_LOG = setup_logger()

if __name__ == "__main__":
    args = setup_parser().parse_args()
    generate_summary(args.input, args.output, args.format == 'list')
